{"version":3,"sources":["components/Upload.tsx","components/Info.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Upload","useState","cid","setCid","fileName","setFileName","fileSize","setFileSize","fileType","setFileType","loading","setLoading","useEffect","document","getElementById","addEventListener","e","input","files","name","String","size","type","preventDefault","file","formData","FormData","append","xhr","XMLHttpRequest","open","process","send","onreadystatechange","readyState","status","console","log","responseText","className","id","htmlFor","role","href","target","rel","scope","style","wordWrap","Info","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wOA4IeA,MAzIf,WAEI,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KAEA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAEA,EAAgCN,mBAAS,IAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAIA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAgDA,OA/CAC,qBAAU,WAENC,SAASC,eAAe,QAASC,iBAAiB,UAAU,SAACC,GACzD,IAAMC,EAAQJ,SAASC,eAAe,QAEtCT,EAAYY,EAAOC,MAAO,GAAGC,MAE7BZ,EAAYa,OAAOH,EAAOC,MAAO,GAAGG,OAEpCZ,EAAYQ,EAAOC,MAAO,GAAGI,MAG7BX,GAAW,GAEXK,EAAEO,iBAIF,IAAMC,EAAOP,EAAMC,MAAO,GAEpBO,EAAW,IAAIC,SAErBD,EAASE,OAAO,OAAQH,GAExB,IAAMI,EAAM,IAAIC,eAEhBD,EAAIE,KAAK,OAAQC,yDAA2C,GAI5DH,EAAII,KAAKP,GAETG,EAAIK,mBAAqB,WACE,IAAnBL,EAAIM,YAAmC,MAAfN,EAAIO,SAC5BC,QAAQC,IAAIT,EAAIU,cAEhBnC,EAAOyB,EAAIU,cAEX3B,GAAW,UAIxB,IAMC,qBAAK4B,UAAU,YAAf,SAEI,sBAAKA,UAAU,cAAf,UACI,mDAIA,uBAAMC,GAAG,OAAT,UACI,sBAAKD,UAAU,aAAf,UACI,uBAAOE,QAAQ,OAAf,mCACA,uBACA,uBACA,uBAAOnB,KAAK,OAAOiB,UAAU,oBAAoBC,GAAG,OAAOrB,KAAK,YAGpE,uBACA,wBAAQG,KAAK,SAASiB,UAAU,kBAAhC,uBAEJ,gCACI,uBAEC7B,EAAU,qBAAK6B,UAAU,8BAA8BG,KAAK,WAEpD,gCACL,6DAGA,gGAIA,mBAAGC,KAAI,sCAAiCzC,GAAO0C,OAAO,SAASC,IAAI,aAAnE,SACKzC,IAGL,uBACA,uBACA,0EAGA,uBACA,wBAAOmC,UAAU,uBAAjB,UACI,gCACI,+BACI,oBAAIO,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,uBACA,oBAAIA,MAAM,MAAV,sBAGR,gCACI,+BACI,6BAAK1C,IACL,6BAAKE,IACL,6BAAKE,IACL,6BACI,mBAAGuC,MAAO,CAAEC,SAAU,cAAtB,SACK9C,0BCzH9B,SAAS+C,IACpB,OACI,qBAAKV,UAAU,MAAf,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,cAAf,UAEI,oBAAIA,UAAU,YAAd,0CAEA,oBAAGA,UAAU,OAAb,8CAAqD,sCAArD,uBAAqF,wCAArF,yBAEJ,oBAAIA,UAAU,SACd,oDACuB,iDADvB,2FAEsE,0CAFtE,eAEkG,0CAFlG,iCAEgJ,sCAFhJ,wDAEiN,sCAFjN,yCAEmQ,0CAFnQ,8CCJL,SAASW,IACtB,OACE,sBAAKX,UAAU,YAAf,UACE,cAACU,EAAD,IACA,cAAC,EAAD,OCVN,IAYeE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACZ,EAAD,MAEFrC,SAASC,eAAe,SAM1BqC,M","file":"static/js/main.0f82d23e.chunk.js","sourcesContent":["// import bootstrap \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useEffect, useState } from \"react\";\nfunction Upload() {\n    // add a state for the cid of the file\n    const [cid, setCid] = useState('');\n    // add a state for the file name\n    const [fileName, setFileName] = useState('');\n    // add a state for the file size\n    const [fileSize, setFileSize] = useState('');\n    // add a state for the file type\n    const [fileType, setFileType] = useState('');\n\n\n    // add a state for loading icon while the file is being uploaded\n    const [loading, setLoading] = useState(false);\n    useEffect(() => {\n        // add an event listener to form submit which has an id for form\n        document.getElementById(\"form\")!.addEventListener(\"submit\", (e) => {\n            const input = document.getElementById(\"file\")! as HTMLInputElement;\n            // set file name\n            setFileName(input!.files![0].name);\n            // set file size\n            setFileSize(String(input!.files![0].size));\n            // set file type\n            setFileType(input!.files![0].type);\n\n            // add loading state as true\n            setLoading(true);\n            // prevent default form submit\n            e.preventDefault();\n            // add input tag as a variable\n\n            // get the file from the input\n            const file = input.files![0];\n            // create a form data object\n            const formData = new FormData();\n            // append the file to the form data object\n            formData.append(\"file\", file);\n            // create an XMLHttpRequest object\n            const xhr = new XMLHttpRequest();\n            // open the request\n            xhr.open(\"POST\", process.env.REACT_APP_API_URL + \"/upload\", true);\n            // set the request header\n            // xhr.setRequestHeader(\"Content-Type\", \"multipart/form-data\");\n            // send the request\n            xhr.send(formData);\n            // listen for the request response\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState === 4 && xhr.status === 200) {\n                    console.log(xhr.responseText);\n                    // set the cid to the response text\n                    setCid(xhr.responseText);\n                    // set the loading to false\n                    setLoading(false);\n                }\n            };\n        });\n    }, []);\n\n\n\n\n    return (\n        <div className=\"container\">\n\n            <div className=\"text-center\">\n                <h1>\n                    Upload your files\n                </h1>\n                {/* create a file upload form so that the user can upload files and use fetch to upload them to the server */}\n                <form id=\"form\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"file\">Upload your file here</label>\n                        <br />\n                        <br />\n                        <input type=\"file\" className=\"form-control-file\" id=\"file\" name=\"file\" />\n\n                    </div>\n                    <br />\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                </form>\n                <div>\n                    <br />\n                    {/* add a loading icon if the file is being uploaded or else add the cid */}\n                    {loading ? <div className=\"spinner-border text-primary\" role=\"status\">\n\n                    </div> : <div>\n                        <h3>\n                            Your File has been uploaded\n                        </h3>\n                        <h5>\n                            You can always preview your file by clicking on the link below\n\n                        </h5>\n                        <a href={`https://infura-ipfs.io/ipfs/${cid}`} target=\"_blank\" rel=\"noreferrer\">\n                            {fileName}\n\n                        </a>\n                        <br />\n                        <br />\n                        <h4>\n                            Below is some information about the file\n                        </h4>\n                        <br />\n                        <table className=\"table table-bordered\">\n                            <thead>\n                                <tr>\n                                    <th scope=\"col\">File Name</th>\n                                    <th scope=\"col\">File Size</th>\n                                    <th scope=\"col\">File Type</th>\n                                    <th scope=\"col\">CID</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    <td>{fileName}</td>\n                                    <td>{fileSize}</td>\n                                    <td>{fileType}</td>\n                                    <td>\n                                        <p style={{ wordWrap: \"break-word\" }}>\n                                            {cid}\n                                        </p>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n\n\n\n                    </div>}\n\n\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default Upload;\n","export default function Info() {\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-12\">\n                <div className=\"jumbotron\">\n                    <div className=\"text-center\">\n\n                        <h1 className=\"display-4\">Share files faster than ever</h1>\n\n                        <p className=\"lead\">Share files in any corner of the <b>world</b> or even store them <b>forever</b> with just a key</p>\n                    </div>\n                    <hr className=\"my-4\" />\n                    <p>\n                        It uses filecoin's <b>Filecoin Network</b> to store your files.\n                        So no need to worry about the security of your files and they are <b>encrypted</b> as well as <b>decrypted</b> on the way back, and you can <b>share</b> them with anyone. The cherry on top is that you can <b>store</b> your files forever, and they will be <b>available</b> for you to download at any time.\n                    </p>\n\n                </div>\n            </div>\n        </div>\n    )\n}\n","// import the upload component\nimport Upload from './components/Upload'\n// import the info component\nimport Info from './components/Info'\n// import bootstrap \nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default function App() {\n  return (\n    <div className=\"container\">\n      <Info />\n      <Upload />\n    </div>\n\n  )\n}\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}